//===========================================================================
//
//  File Name:    Setup.rul
//
//  Description:  Blank setup main script file
//
//  Comments:     Blank setup is an empty setup project. If you want to
//                create a new project via. step-by step instructions use the
//                Project Assistant.
//
//===========================================================================

// Included header files ----------------------------------------------------
#include "ifx.h"

#define DEFAULT_PORT "5984"
#define SERVICE_NAME "CouchbaseServer"
#define ERLANG_VER   "5.7.4"

prototype VOID LaunchBrowser(STRING);
prototype VOID CreateErlangInis(STRING);
prototype VOID CreateErlangIni(STRING, STRING);
prototype BOOL PortTaken(STRING);
prototype VOID RunErlsrv(STRING, STRING);
prototype VOID RegisterErlService(STRING);
prototype VOID UnregisterErlService(STRING);
prototype VOID UnregisterAll();
prototype VOID CustomRemoveAll();

BOOL   g_bNeedUpgrade;
STRING g_szTempDir;

function VOID LaunchBrowser(szURL)
begin
  LaunchAppAndWait(WINSYSDIR ^ "cmd.exe",
                   "/c \"start " + szURL + "\"",
                   LAAW_OPTION_NOWAIT | LAAW_OPTION_HIDDEN);
end;

function BOOL PortTaken(szPort)
  STRING szOutFile;
  STRING szReturnLine;
  NUMBER nvReturnLineNum;
  NUMBER nvReturnCode;
begin
  szOutFile = INSTALLDIR ^ "bin" ^ "test_port.out";

  DeleteFile(szOutFile);

  LaunchAppAndWait(INSTALLDIR ^ "bin" ^ "test_port.bat",
                   szPort + " \"" + szOutFile + "\"",
                   LAAW_OPTION_WAIT | LAAW_OPTION_HIDDEN);

  nvReturnCode = FileGrep(szOutFile,
                          szPort,
                          szReturnLine,
                          nvReturnLineNum, RESTART);

  DeleteFile(szOutFile);

  return (nvReturnCode = 0);
end;

function VOID CreateErlangInis(szVer)
begin
    // Note that we are overwriting (or changing) existing files that
    // InstallShield just wrote down.  So, uninstallation will
    // be automatically taken care of by InstallShield.

    CreateErlangIni("bin",
                    "erts-" + szVer ^ "bin");
    CreateErlangIni("erts-" + szVer ^ "bin",
                    "erts-" + szVer ^ "bin");
end;

function VOID CreateErlangIni(szIniDir, szBinDir)
    STRING szRootPath, szBinPath, szIniPath, szIniName;
    STRING szTitle, szTxt;
    NUMBER nvFileHandle;
begin
    szRootPath = INSTALLDIR;
    szIniPath  = szRootPath ^ szIniDir;
    if (ExistsDir(szIniPath) == NOTEXISTS) then
        if (CreateDir(szIniPath) < 0) then
            MessageBox ( szIniPath + " folder creation failed.", SEVERE);
            abort;
        endif;
    endif;

    szBinPath  = szRootPath ^ szBinDir;
    szIniName  = "erl.ini";

    OpenFileMode (FILE_MODE_APPEND);

    if (CreateFile (nvFileHandle, szIniPath, szIniName) < 0) then
        MessageBox ("erl.ini file creation failed.", SEVERE);
        abort;
    else
        StrRemoveLastSlash(szBinPath);
        StrRemoveLastSlash(szRootPath);

        StrReplace(szBinPath, "\\", "\\\\", 0);
        StrReplace(szRootPath, "\\", "\\\\", 0);

        szTxt =
          "[erlang]\r\n" +
          "Bindir=" + szBinPath + "\r\n" +
          "Progname=erl\r\n" +
          "Rootdir=" + szRootPath + "\r\n";

        if (WriteLine(nvFileHandle, szTxt) < 0) then
            MessageBox ("WriteLine failed.", SEVERE);
            abort;
        endif;
    endif;

    CloseFile (nvFileHandle);
end;

function VOID RegisterErlService(szVer)
    STRING szProg;
begin
    RunErlsrv(szVer, "remove " + SERVICE_NAME);

    szProg = INSTALLDIR ^ "bin" ^ "service_register.bat";

    LaunchAppAndWait(szProg, "",
                     WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS);

    RunErlsrv(szVer, "start " + SERVICE_NAME);
end;

function VOID UnregisterErlService(szVer)
begin
    RunErlsrv(szVer, "remove " + SERVICE_NAME);

    LaunchAppAndWait(INSTALLDIR ^
                     "erts-" + szVer ^
                     "bin" ^ "epmd.exe",
                     "-kill",
                     WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS);
end;

function VOID RunErlsrv(szVer, szCmd)
    STRING szProg;
begin
    szProg = INSTALLDIR ^
             "erts-" + szVer ^ "bin" ^ "erlsrv.exe";

    LaunchAppAndWait(szProg, szCmd,
                     WAIT | LAAW_OPTION_HIDDEN | LAAW_OPTION_SHOW_HOURGLASS);
end;

function VOID UnregisterAll()
begin
    // UnregisterErlService early while erlsrv.exe still exists.
    UnregisterErlService(ERLANG_VER);
end;

function VOID CustomRemoveAll()
    STRING szSrcDir, szTgtDir;
    NUMBER nResult;
begin
    UnregisterAll();

    ComponentRemoveAll();
    //ComponentTransferData(MEDIA);

    szSrcDir = INSTALLDIR ^ "var";
    szTgtDir = INSTALLDIR ^ g_szTempDir;

    // Back up data directory
    RenameFile(szSrcDir, szTgtDir);

    DeleteDir(INSTALLDIR ^ "share", ALLCONTENTS);
    DeleteDir(INSTALLDIR ^ "bin", ALLCONTENTS);
end;

//---------------------------------------------------------------------------
// OnBegin
//
// The OnBegin event is called directly by the framework after the setup
// initializes. Note that this event will be called AFTER "Initialization"
// events (i.e.) OnSetTARGETDIR, OnCheckMediaPassword.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnBegin()
    NUMBER nResult, nSize;
    STRING szUpgrade;
    STRING szTime, szDate;
begin
    g_bNeedUpgrade = FALSE;

    nSize = MAX_STRING + 1;
    nResult = MsiGetProperty(ISMSI_HANDLE , "IS_MAJOR_UPGRADE" , szUpgrade, nSize);
    if (nResult == ERROR_SUCCESS) then
        if (szUpgrade == 'Yes') then
            g_bNeedUpgrade = TRUE;
        endif;
    endif;

    // Temp directory format : backup-MM_DD_YYYY_HH_MM_SS
    GetSystemInfo(TIME, nResult, szTime);
    StrReplace(szTime, ":", "-", 0);
    GetSystemInfo(DATE, nResult, szDate);
    StrReplace(szDate, ":", "-", 0);
    g_szTempDir = "backup-" + szDate + "-" + szTime;
end;

//---------------------------------------------------------------------------
// OnFirstUIBefore
//
// First Install UI Sequence - Before Move Data
//
// The OnFirstUIBefore event is called by OnShowUI when the setup is
// running in first install mode. By default this event displays UI allowing
// the end user to specify installation parameters.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIBefore()
    number  nResult, nLevel, nSize, nSetupType;
    string  szTitle, szMsg, szOpt1, szOpt2, szLicenseFile;
    string  szName, szCompany, szTargetPath, szDir, szFeatures;
    BOOL    bLicenseAccepted;
begin

    // Added in InstallShield 15 - Show an appropriate error message if
    // -removeonly is specified and the product is not installed.
    if( REMOVEONLY ) then
        Disable( DIALOGCACHE );
        szMsg = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
        SdSubstituteProductInfo( szMsg );
        MessageBox( szMsg, SEVERE );
        abort;
    endif;

    nSetupType = COMPLETE;
    szDir = TARGETDIR;
    szName = "";
    szCompany = "";
    bLicenseAccepted = FALSE;

    nSetupType = TYPICAL;
// Beginning of UI Sequence
Dlg_Start:
    nResult = 0;

Dlg_SdWelcome:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdWelcome)
    nResult = SdWelcome( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdWelcome)
    if (nResult = BACK) goto Dlg_Start;

Dlg_SdAskDestPath2:
    nResult = SdAskDestPath(szTitle, szMsg, INSTALLDIR, 0);
    if (nResult = BACK) goto Dlg_SdWelcome;

Dlg_SdStartCopy2:
    szTitle = "";
    szMsg = "";
    //{{IS_SCRIPT_TAG(Dlg_SdStartCopy2)
    nResult = SdStartCopy2( szTitle, szMsg );
    //}}IS_SCRIPT_TAG(Dlg_SdStartCopy2)
    if (nResult = BACK) goto Dlg_SdAskDestPath2;

    // Added in 11.0 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_FIRSTUI ) );

    // setup default status
    Enable(STATUSEX);

    return 0;
end;

//---------------------------------------------------------------------------
// OnFirstUIAfter
//
// First Install UI Sequence - After Move Data
//
// The OnFirstUIAfter event called by OnShowUI after the file transfer
// of the setup when the setup is running in first install mode. By default
// this event displays UI that informs the end user that the setup has been
// completed successfully.
//
// Note: This event will not be called automatically in a
// program...endprogram style setup.
//---------------------------------------------------------------------------
function OnFirstUIAfter()
    STRING szTitle, szMsg1, szMsg2, szOpt1, szOpt2;
    NUMBER bvOpt1, bvOpt2;
    STRING szPort, szPortMsg, szSite;
    NUMBER nvPort, nResult;
begin
    szPort = DEFAULT_PORT;

Dlg_Finish:
    CreateErlangInis(ERLANG_VER);
    RegisterErlService(ERLANG_VER);

    Disable(STATUSEX);

    szTitle = "";
    szMsg1 = "";
    szMsg2 = "";
    szOpt1 = "";
    szOpt2 = "";
    bvOpt1   = FALSE;
    bvOpt2   = FALSE;

    //{{IS_SCRIPT_TAG(Dlg_SdDinishEx)
    if ( BATCH_INSTALL ) then
        SdFinishReboot ( szTitle , szMsg1 , SYS_BOOTMACHINE , szMsg2 , 0 );
    else
        SdFinish ( szTitle , szMsg1 , szMsg2 , szOpt1 , szOpt2 , bvOpt1 , bvOpt2 );
    endif;
    //}}IS_SCRIPT_TAG(Dlg_SdDinishEx)

    szSite = "http://localhost:" + szPort + "/_utils/";
    LaunchBrowser(szSite);
end;

//---------------------------------------------------------------------------
// OnUninstall
//
// The OnUninstall event is called when the setup is run with the -uninst
// switch, in this case this is the only event that will be called.
//---------------------------------------------------------------------------
function OnUninstall()
    BOOL   bOpt1, bOpt2;
    int    nReturn;
    string szTitle, szMsg1, szMsg2, szOpt1, szOpt2, svResult, szCaption;
begin

    // Added in InstallShield 15 - Show an appropriate error message if
    // -uninst is specified and the product is not installed.
    if( !MAINTENANCE ) then
        szMsg1 = SdLoadString( IDS_IFX_ERROR_PRODUCT_NOT_INSTALLED_UNINST );
        SdSubstituteProductInfo( szMsg1 );
        MessageBox( szMsg1, SEVERE );
        abort;
    endif;

    svResult = SdLoadString(ISWI_IS5_UNINST_MSG);
    szCaption = SdLoadString(IFX_ONMAINTUI_CAPTION);
    Sprintf (svResult, svResult, @PRODUCT_NAME);
    if (IDCANCEL = SprintfBox(MB_OKCANCEL, szCaption, svResult)) then
        abort;
    endif;

    // Added in IS 2009 - Set appropriate StatusEx static text.
    SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );

    // Uninstall the application
    Enable(STATUSEX);
    CustomRemoveAll();
    Disable(STATUSEX);

    bOpt1 = FALSE;
    bOpt2 = FALSE;

    // Show final dialog.
    if ( BATCH_INSTALL ) then
        SdFinishReboot( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG2), SYS_BOOTMACHINE, "", 0 );
    else
        SdFinish( SdLoadString(IFX_SDFINISH_REMOVE_TITLE), SdLoadString(IFX_SDFINISH_REMOVE_MSG1), "", "" , "", bOpt1 , bOpt2 );
    endif;

end;

//---------------------------------------------------------------------------
// OnMaintUIBefore
//
// The OnMaintUIBefore event is called by the framework when the setup is
// running in maintenance mode. By default this event displays UI that
// allows the end user to add or remove features, repair currently
// installed features or uninstall the application.
//---------------------------------------------------------------------------
function OnMaintUIBefore()
    NUMBER nResult, nType;
    STRING szTitle, szMsg, svDir, svResult, szCaption;
begin
    // TO DO: if you want to enable background, window title, and caption bar title
    // SetTitle( @PRODUCT_NAME, 24, WHITE );
    // SetTitle( @PRODUCT_NAME, 0, BACKGROUNDCAPTION );
    // SetColor(BACKGROUND,RGB (0, 128, 128));
    // Enable( FULLWINDOWMODE );
    // Enable( BACKGROUND );

Dlg_Start:
    /*
    // Added in Version 9.5 - Support for REMOVEONLY option.
    if( !REMOVEONLY ) then
        // In standard mode show maintenance dialog
        Disable(BACKBUTTON);
        nType = SdWelcomeMaint(szTitle, szMsg, MODIFY);
        Enable(BACKBUTTON);
    else
        // Hide the initial progress dialog as otherwise the user can
        // click on it, and hide the MessageBox.
        Disable( DIALOGCACHE );

        // In RemoveOnly mode, set to remove.
        nType = REMOVEALL;
    endif;
    */

    Disable(DIALOGCACHE);
    nType = REMOVEALL;

    // Show Uninstall Confirmation Dialog
    if ( nType = REMOVEALL ) then
        nResult = MessageBox( SdLoadString( IFX_MAINTUI_MSG ), MB_YESNO );
        if (nResult != IDYES ) then

            if( REMOVEONLY ) then
                // In REMOVEONLY mode, abort the setup.
                abort;
            else
                // In non-REMOVEONLY mode, redisplay the previous dialog.
                goto Dlg_Start;
            endif;

        endif;
    endif;

    nResult = NEXT;
Dlg_SdFeatureTree:
    if (nType = MODIFY) then
        szTitle = "";
        szMsg = "";
        nResult = SdFeatureTree(szTitle, szMsg, INSTALLDIR, "", 2);
        if (nResult = BACK) goto Dlg_Start;
    endif;

    switch(nType)
        case REMOVEALL:
            CustomRemoveAll();

            // Added in IS 2009 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REMOVEALL ) );
        case REPAIR:
            ComponentReinstall();

            // Added in IS 2009 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_REPAIR ) );
        case MODIFY:
            // Added in IS 2009 - Set appropriate StatusEx static text.
            SetStatusExStaticText( SdLoadString( IDS_IFX_STATUSEX_STATICTEXT_MAINTUI_MODIFY ) );
    endswitch;

    Enable(STATUSEX);
end;
